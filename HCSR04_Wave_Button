#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define TRIG_PIN D5
#define ECHO_PIN D6
#define BUTTON_PIN D3
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int waveData[SCREEN_WIDTH] = {0}; // Array to hold wave data
int mode = 0;                     // Current range mode: 0 = Close, 1 = Medium, 2 = Long
bool buttonState = HIGH;          // Previous state of the button
bool lastButtonState = HIGH;

void setup() {
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    while (true);
  }

  display.clearDisplay();
  display.display();
}

void loop() {
  handleButtonPress(); // Check for button press to change mode

  int distance = measureDistance();
  int y = mapDistanceToMode(distance); // Map distance based on current mode
  updateWaveData(y);
  drawWave();

  delay(100);
}

void handleButtonPress() {
  // Read the button state
  bool currentState = digitalRead(BUTTON_PIN);

  // Check for state change (debouncing)
  if (currentState == LOW && lastButtonState == HIGH) {
    delay(50); // Debounce delay
    if (digitalRead(BUTTON_PIN) == LOW) { // Confirm button is still pressed
      mode = (mode + 1) % 3; // Cycle through modes
      Serial.print("Mode changed to: ");
      Serial.println(mode); // Debugging output
    }
  }

  // Update the last button state
  lastButtonState = currentState;
}

int measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  int distance = duration * 0.034 / 2; // Convert to cm
  return constrain(distance, 2, 400); // Limit range to HC-SR04 specs
}

int mapDistanceToMode(int distance) {
  switch (mode) {
    case 0: // Close Range (2 to 50 cm)
      return map(distance, 2, 50, 0, SCREEN_HEIGHT - 1);
    case 1: // Medium Range (2 to 200 cm)
      return map(distance, 2, 200, 0, SCREEN_HEIGHT - 1);
    case 2: // Long Range (2 to 400 cm)
      return map(distance, 2, 400, 0, SCREEN_HEIGHT - 1);
    default:
      return 0; // Should never happen
  }
}

void updateWaveData(int newY) {
  for (int i = 0; i < SCREEN_WIDTH - 1; i++) {
    waveData[i] = waveData[i + 1]; // Shift left
  }
  waveData[SCREEN_WIDTH - 1] = newY; // Add new data
}

void drawWave() {
  display.clearDisplay();

  for (int x = 0; x < SCREEN_WIDTH - 1; x++) {
    display.drawLine(x, waveData[x], x + 1, waveData[x + 1], SSD1306_WHITE);
  }

  // Display mode name for user reference
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  switch (mode) {
    case 0:
      display.print("Mode: Close");
      break;
    case 1:
      display.print("Mode: Medium");
      break;
    case 2:
      display.print("Mode: Long");
      break;
  }

  display.display();
}
